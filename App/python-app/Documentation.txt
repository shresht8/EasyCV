1) minikube start # Starts cluster

2) minikube docker-env # This command gives set of environment variables to connect to minikube docker daemon rather than local docker Daemon

3) #Run all commands from output of 2)

4) Write manifest file for python-app deployment, latex-app deployment, python-app service (since this is exposed) and persistent volume claim.
	Note: Use imagePullPolicy: IfNotPresent if docker images used have tags as 'latest'

5) docker build -t python-app:latest ./python-app # Build python image in minikube docker daemon;
						  # If deployment needs to be updated, just run this command to update hte docker image. Make sure tag is latest and imagepullpolicy is Always
				
6) docker build -t latex-app:latest ./latex-app # Build latex image in minikube docker daemon
						# If deployment needs to be updated, just run this command to update hte docker image. Make sure tag is latest and imagepullpolicy is Always

7) Apply manifest files for deployment, service and storage: Run from directory they are stored
   kubectl apply -f easycv-app-deployment.yaml
   kubectl apply -f python-app-service.yaml

8) If you cant find service ip, then run below command:
minikube service python-app-service

Note: To run on local, mount output directory to /app/output: minikube mount output:/app/output

Testing:

----------------------------------------------------------------------------------------------------------------------

{
  "arg1": "cv_templates/cv_template_3",
  "arg2": "user/Shresht_Shetty",
  "arg3": "https://www.seek.com.au/job/73015372?ref=search-standalone&type=standout#sol=c39c571092d120b933c7c4e717078f095d830580",
  "arg4": "/app/output"
}

----------------------------------------------------------------------------------------------------------------------


8) Check if pods are running: kubectl get pods

9) If pods are running, start the python service using: minikube service python-app-service

Some useful commands:
a) Restart deployments using:
kubectl delete pods latex-app-deployment-8758845fd-b6mz2 # Delete a pod so that image can be pulled again
kubectl rollout restart deployment python-app-deployment
kubectl rollout restart deployment latex-app-deployment

b) To describe deployments:
kubectl describe deployment python-app-deployment

c)Start an interactive shell session in a pod 
For latex app: kubectl exec -it <eascv pod name> -c latex-app -- /bin/bash
For python app: kubectl exec -it <eascv pod name> -c python-app -- /bin/bash

d) To copy pdf from app to local:
kubectl cp easycv-app-deployment-99b57b4b7-djdjs:/app/output/main.pdf ./main.pdf

e) To delete all files from a directory in cluster: rm -rf * (Inside the interactive shell)

When rolling out a new image follow the below steps:
1) docker build -t latex-app:latest ./latex-app - to build the docker image in repository
2) minikube start - to start kubbernetes container
3) minikube docker-env - to point kubernetes container to the local docker registry
This should update the image, to check 
4) minikube exec -it <easycv-app-deployment> -c latex-app -- /bin/bash
5) cat entrypoint_final_v2.sh




----------------------------------------------------------------------------------------------------------------------
Follow Below for google cloud deployments and testing
----------------------------------------------------------------------------------------------------------------------

To build and push to google cloud Artifact registry 

(In python-app folder):

gcloud builds submit --tag australia-southeast1-docker.pkg.dev/keyproject-401005/easycv-artifacts/python-app:latest .

(In latex-app folder):

gcloud builds submit --tag australia-southeast1-docker.pkg.dev/keyproject-401005/easycv-artifacts/latex-app:latest .

----------------------------------------------------------------------------------------------------------------------

Deployment on google cloud kubernetes cluster:

-------------------------------------------------------------------------------------------------------------

To authenticate google cloud storage into google kubernetes cluster

1)Creating cluster in google cloud (In gcloud console):

gcloud container clusters create-auto easycv-gke --location australia-southeast1

2) In directory with service account private key run:
kubectl create secret generic gcloud-storage-auth-key --from-file=key.json=kp-sa-private-key.json


3) Make sure compute engine service account has editor permissions - to pull images from Artifact Registry

4) Apply manifest files for deployment, service and storage: Run from directory they are stored
   kubectl apply -f easycv-app-deployment.yaml
   kubectl apply -f python-app-service.yaml

5) Check if service is running: kubectl get services 

----------------------------------------------------------------------------------------------------------------------

Testing:

----------------------------------------------------------------------------------------------------------------------

{
  "arg1": "cv_templates/cv_template_3",
  "arg2": "user/Shresht_Shetty",
  "arg3": "https://www.seek.com.au/job/73015372?ref=search-standalone&type=standout#sol=c39c571092d120b933c7c4e717078f095d830580",
  "arg4": "/app/output"
}

----------------------------------------------------------------------------------------------------------------------

Important cluster  commands:

1) Stopping and starting a cluster:


2) Check status of pods:
kubectl get pods

3) Check status of deployments:
kubectl get deployments

4) Restart deployments - After some changes have been made:
kubectl rollout restart deployment 

----------------------------------------------------------------------------------------------------------------------